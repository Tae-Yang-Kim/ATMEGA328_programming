
Chapter_19.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000042a  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800112  00800112  000004d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d47  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000837  00000000  00000000  00001307  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000664  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000021a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004af  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b1  00000000  00000000  00002773  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  9e:	0c 94 13 02 	jmp	0x426	; 0x426 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_init>:
 *  	2015. 07. 14
 */ 

#include "I2C.h"
void I2C_init(void) {
	DDRC |= (1 << I2C_SCL); // SCL 핀을 출력으로 설정
  a6:	3d 9a       	sbi	0x07, 5	; 7
	DDRC |= (1 << I2C_SDA); // SDA 핀을 출력으로 설정
  a8:	3c 9a       	sbi	0x07, 4	; 7
	TWBR = 32; // I2C 클록 주파수 설정 200KHz
  aa:	80 e2       	ldi	r24, 0x20	; 32
  ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR = (1 << TWEN) | (1 << TWEA); // I2C 활성화, ACK 허용
  b0:	84 e4       	ldi	r24, 0x44	; 68
  b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b6:	08 95       	ret

000000b8 <I2C_start>:
}
void I2C_start(void) {
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN) | _BV(TWEA);
  b8:	84 ee       	ldi	r24, 0xE4	; 228
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while( !(TWCR & (1 << TWINT)) ); // 시작 완료 대기
  be:	ec eb       	ldi	r30, 0xBC	; 188
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 23       	and	r24, r24
  c6:	ec f7       	brge	.-6      	; 0xc2 <I2C_start+0xa>
}
  c8:	08 95       	ret

000000ca <I2C_transmit>:
void I2C_transmit(uint8_t data) {
	TWDR = data;
  ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
  ce:	84 ec       	ldi	r24, 0xC4	; 196
  d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while( !(TWCR & (1 << TWINT)) ); // 전송 완료 대기
  d4:	ec eb       	ldi	r30, 0xBC	; 188
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 23       	and	r24, r24
  dc:	ec f7       	brge	.-6      	; 0xd8 <I2C_transmit+0xe>
}
  de:	08 95       	ret

000000e0 <I2C_receive>:
uint8_t I2C_receive(void) {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
  e0:	84 ec       	ldi	r24, 0xC4	; 196
  e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while( !(TWCR & (1 << TWINT)) ); // 수신 완료 대기
  e6:	ec eb       	ldi	r30, 0xBC	; 188
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	ec f7       	brge	.-6      	; 0xea <I2C_receive+0xa>
	return TWDR;
  f0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
  f4:	08 95       	ret

000000f6 <I2C_stop>:
void I2C_stop(void) {
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN) | _BV(TWEA);
  f6:	84 ed       	ldi	r24, 0xD4	; 212
  f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  fc:	08 95       	ret

000000fe <__vector_16>:
	// timer0_millis 값이 변하지 않도록 인터럽트를 비활성화
	cli();
	m = timer0_millis;
	SREG = oldSREG; // 이전 상태 레지스터 값 복원
	return m; // 프로그램 시작 후 경과 시간
}
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <timer0_millis>
 124:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <timer0_millis+0x1>
 128:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <timer0_millis+0x2>
 12c:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <timer0_millis+0x3>
 130:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 134:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 138:	0f 5f       	subi	r16, 0xFF	; 255
 13a:	1f 4f       	sbci	r17, 0xFF	; 255
 13c:	2f 4f       	sbci	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	48 96       	adiw	r24, 0x18	; 24
 142:	68 ee       	ldi	r22, 0xE8	; 232
 144:	73 e0       	ldi	r23, 0x03	; 3
 146:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__divmodhi4>
 14a:	ac 01       	movw	r20, r24
 14c:	cb 01       	movw	r24, r22
 14e:	77 0f       	add	r23, r23
 150:	aa 0b       	sbc	r26, r26
 152:	bb 0b       	sbc	r27, r27
 154:	08 0f       	add	r16, r24
 156:	19 1f       	adc	r17, r25
 158:	2a 1f       	adc	r18, r26
 15a:	3b 1f       	adc	r19, r27
 15c:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <timer0_millis>
 160:	10 93 15 01 	sts	0x0115, r17	; 0x800115 <timer0_millis+0x1>
 164:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <timer0_millis+0x2>
 168:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <timer0_millis+0x3>
 16c:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <__data_end+0x1>
 170:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <__data_end>
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <bcd_to_decimal>:

uint8_t bcd_to_decimal(uint8_t bcd){ // BCD 형식 -> 이진수 형식
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 196:	98 2f       	mov	r25, r24
 198:	92 95       	swap	r25
 19a:	9f 70       	andi	r25, 0x0F	; 15
 19c:	99 0f       	add	r25, r25
 19e:	29 2f       	mov	r18, r25
 1a0:	22 0f       	add	r18, r18
 1a2:	22 0f       	add	r18, r18
 1a4:	92 0f       	add	r25, r18
 1a6:	8f 70       	andi	r24, 0x0F	; 15
}
 1a8:	89 0f       	add	r24, r25
 1aa:	08 95       	ret

000001ac <decimal_to_bcd>:
uint8_t decimal_to_bcd(uint8_t decimal){ // 이진수 형식 -> BCD 형식
	return ( ((decimal / 10) << 4) | (decimal % 10) );
 1ac:	9d ec       	ldi	r25, 0xCD	; 205
 1ae:	89 9f       	mul	r24, r25
 1b0:	91 2d       	mov	r25, r1
 1b2:	11 24       	eor	r1, r1
 1b4:	96 95       	lsr	r25
 1b6:	96 95       	lsr	r25
 1b8:	96 95       	lsr	r25
 1ba:	20 e1       	ldi	r18, 0x10	; 16
 1bc:	92 9f       	mul	r25, r18
 1be:	a0 01       	movw	r20, r0
 1c0:	11 24       	eor	r1, r1
 1c2:	99 0f       	add	r25, r25
 1c4:	29 2f       	mov	r18, r25
 1c6:	22 0f       	add	r18, r18
 1c8:	22 0f       	add	r18, r18
 1ca:	92 0f       	add	r25, r18
 1cc:	89 1b       	sub	r24, r25
}
 1ce:	84 2b       	or	r24, r20
 1d0:	08 95       	ret

000001d2 <main>:
int main(void)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	61 97       	sbiw	r28, 0x11	; 17
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
	int hour;
	int week;
	int day;
	int month;
	int year;
	TCCR0B |= (0<<CS02) | (1<<CS01) | (0 << CS00); // 분주비를 64로 설정
 1e6:	85 b5       	in	r24, 0x25	; 37
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0); // 오버플로 인터럽트 허용
 1ec:	ee e6       	ldi	r30, 0x6E	; 110
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	80 83       	st	Z, r24
	sei(); // 전역적으로 인터럽트 허용
 1f6:	78 94       	sei
	unsigned long time_previous, time_current;
	DDRD = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
 1fc:	8f e0       	ldi	r24, 0x0F	; 15
 1fe:	84 b9       	out	0x04, r24	; 4
	
	uint8_t numbers[]
 200:	8a e0       	ldi	r24, 0x0A	; 10
 202:	e0 e0       	ldi	r30, 0x00	; 0
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	de 01       	movw	r26, r28
 208:	11 96       	adiw	r26, 0x01	; 1
 20a:	01 90       	ld	r0, Z+
 20c:	0d 92       	st	X+, r0
 20e:	8a 95       	dec	r24
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x38>
	= {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
	int count = 0000; // 현재 표시할 숫자(0~9)
	int thousands, hundreds, tens, ones;
	
	uint8_t i;
	I2C_init(); // I2C 초기화
 212:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_init>
	uint8_t address = 0x68; // RTC 모듈의 I2C 주소
	// 초, 분, 시, 요일, 일, 월, 년
	// 2014년 9월 1일 월요일 12시 34분 56초
	uint8_t data[] = {10, 00, 12, 2, 1, 9, 14};
 216:	87 e0       	ldi	r24, 0x07	; 7
 218:	ea e0       	ldi	r30, 0x0A	; 10
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	de 01       	movw	r26, r28
 21e:	1b 96       	adiw	r26, 0x0b	; 11
 220:	01 90       	ld	r0, Z+
 222:	0d 92       	st	X+, r0
 224:	8a 95       	dec	r24
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x4e>
	// RTC 모듈에 시간 설정
	I2C_start(); // I2C 시작
 228:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_start>
	I2C_transmit(address << 1); // I2C 주소 전송. 쓰기 모드
 22c:	80 ed       	ldi	r24, 0xD0	; 208
 22e:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
	// RTC에 데이터를 기록할 메모리 시작 주소 전송
	I2C_transmit(0);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
 238:	8e 01       	movw	r16, r28
 23a:	05 5f       	subi	r16, 0xF5	; 245
 23c:	1f 4f       	sbci	r17, 0xFF	; 255
 23e:	7e 01       	movw	r14, r28
 240:	22 e1       	ldi	r18, 0x12	; 18
 242:	e2 0e       	add	r14, r18
 244:	f1 1c       	adc	r15, r1
	for(i = 0; i < 7; i++){
		I2C_transmit(decimal_to_bcd(data[i])); // 시간 설정
 246:	f8 01       	movw	r30, r16
 248:	81 91       	ld	r24, Z+
 24a:	8f 01       	movw	r16, r30
 24c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <decimal_to_bcd>
 250:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
	// RTC 모듈에 시간 설정
	I2C_start(); // I2C 시작
	I2C_transmit(address << 1); // I2C 주소 전송. 쓰기 모드
	// RTC에 데이터를 기록할 메모리 시작 주소 전송
	I2C_transmit(0);
	for(i = 0; i < 7; i++){
 254:	0e 15       	cp	r16, r14
 256:	1f 05       	cpc	r17, r15
 258:	b1 f7       	brne	.-20     	; 0x246 <main+0x74>
		I2C_transmit(decimal_to_bcd(data[i])); // 시간 설정
	}
	I2C_stop(); // I2C 정지
 25a:	0e 94 7b 00 	call	0xf6	; 0xf6 <I2C_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	ff ef       	ldi	r31, 0xFF	; 255
 260:	27 ea       	ldi	r18, 0xA7	; 167
 262:	81 e6       	ldi	r24, 0x61	; 97
 264:	f1 50       	subi	r31, 0x01	; 1
 266:	20 40       	sbci	r18, 0x00	; 0
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x92>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x9c>
 26e:	00 00       	nop
	_delay_ms(2000); // 2초 대기
	I2C_start(); // I2C 시작
 270:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_start>
	I2C_transmit(address << 1); // I2C 주소 전송. 쓰기 모드
 274:	80 ed       	ldi	r24, 0xD0	; 208
 276:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
	// RTC에서 데이터를 읽어 올 메모리 시작 주소 전송
	I2C_transmit(0);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
	I2C_stop(); // I2C 정지
 280:	0e 94 7b 00 	call	0xf6	; 0xf6 <I2C_stop>
 284:	9f ef       	ldi	r25, 0xFF	; 255
 286:	e3 ed       	ldi	r30, 0xD3	; 211
 288:	f0 e3       	ldi	r31, 0x30	; 48
 28a:	91 50       	subi	r25, 0x01	; 1
 28c:	e0 40       	sbci	r30, 0x00	; 0
 28e:	f0 40       	sbci	r31, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0xb8>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0xc2>
 294:	00 00       	nop
	_delay_ms(1000);
	I2C_start(); // I2C 읽기 모드로 다시 시작
 296:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_start>
	I2C_transmit( (address << 1) + 1 ); // I2C 주소 전송. 읽기 모드
 29a:	81 ed       	ldi	r24, 0xD1	; 209
 29c:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
	sec		= bcd_to_decimal(I2C_receive());
 2a0:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
	minute  = bcd_to_decimal(I2C_receive());
 2a4:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
	hour	= bcd_to_decimal(I2C_receive());
 2a8:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
	week	= bcd_to_decimal(I2C_receive());
 2ac:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
	day		= bcd_to_decimal(I2C_receive());
 2b0:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
	month	= bcd_to_decimal(I2C_receive());
 2b4:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
	year	= bcd_to_decimal(I2C_receive());
 2b8:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
	I2C_stop(); // I2C 정지
 2bc:	0e 94 7b 00 	call	0xf6	; 0xf6 <I2C_stop>
		day		= bcd_to_decimal(I2C_receive());
		month	= bcd_to_decimal(I2C_receive());
		year	= bcd_to_decimal(I2C_receive());
		I2C_stop(); // I2C 정지

		PORTB = 0x0E; // 천의 자리 출력
 2c0:	0f 2e       	mov	r0, r31
 2c2:	fe e0       	ldi	r31, 0x0E	; 14
 2c4:	8f 2e       	mov	r8, r31
 2c6:	f0 2d       	mov	r31, r0
		PORTD = numbers[minute/10];
 2c8:	0f 2e       	mov	r0, r31
 2ca:	fa e0       	ldi	r31, 0x0A	; 10
 2cc:	ef 2e       	mov	r14, r31
 2ce:	f1 2c       	mov	r15, r1
 2d0:	f0 2d       	mov	r31, r0
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0D; // 백의 자리 출력
 2d2:	0f 2e       	mov	r0, r31
 2d4:	fd e0       	ldi	r31, 0x0D	; 13
 2d6:	9f 2e       	mov	r9, r31
 2d8:	f0 2d       	mov	r31, r0
		PORTD = numbers[minute%10];
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0B; // 십의 자리 출력
 2da:	0f 2e       	mov	r0, r31
 2dc:	fb e0       	ldi	r31, 0x0B	; 11
 2de:	af 2e       	mov	r10, r31
 2e0:	f0 2d       	mov	r31, r0
		PORTD = numbers[sec/10];
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x07; // 일의 자리 출력
 2e2:	0f 2e       	mov	r0, r31
 2e4:	f7 e0       	ldi	r31, 0x07	; 7
 2e6:	bf 2e       	mov	r11, r31
 2e8:	f0 2d       	mov	r31, r0
	day		= bcd_to_decimal(I2C_receive());
	month	= bcd_to_decimal(I2C_receive());
	year	= bcd_to_decimal(I2C_receive());
	I2C_stop(); // I2C 정지
	while(1){
		I2C_start(); // I2C 시작
 2ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_start>
		I2C_transmit(address << 1); // I2C 주소 전송. 쓰기 모드
 2ee:	80 ed       	ldi	r24, 0xD0	; 208
 2f0:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
		// RTC에 데이터를 기록할 메모리 시작 주소 전송
		I2C_transmit(0);
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
		I2C_stop(); // I2C 정지
 2fa:	0e 94 7b 00 	call	0xf6	; 0xf6 <I2C_stop>
		I2C_start(); // I2C 시작
 2fe:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_start>
		I2C_transmit(address << 1); // I2C 주소 전송. 쓰기 모드
 302:	80 ed       	ldi	r24, 0xD0	; 208
 304:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
		// RTC에서 데이터를 읽어 올 메모리 시작 주소 전송
		I2C_transmit(0);
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
		I2C_stop(); // I2C 정지
 30e:	0e 94 7b 00 	call	0xf6	; 0xf6 <I2C_stop>
		I2C_start(); // I2C 읽기 모드로 다시 시작
 312:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_start>
		I2C_transmit( (address << 1) + 1 ); // I2C 주소 전송. 읽기 모드
 316:	81 ed       	ldi	r24, 0xD1	; 209
 318:	0e 94 65 00 	call	0xca	; 0xca <I2C_transmit>
		sec		= bcd_to_decimal(I2C_receive());
 31c:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
 320:	0e 94 cb 00 	call	0x196	; 0x196 <bcd_to_decimal>
 324:	08 2f       	mov	r16, r24
 326:	10 e0       	ldi	r17, 0x00	; 0
		minute  = bcd_to_decimal(I2C_receive());
 328:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
 32c:	0e 94 cb 00 	call	0x196	; 0x196 <bcd_to_decimal>
 330:	c8 2e       	mov	r12, r24
 332:	d1 2c       	mov	r13, r1
		hour	= bcd_to_decimal(I2C_receive());
 334:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
		week	= bcd_to_decimal(I2C_receive());
 338:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
		day		= bcd_to_decimal(I2C_receive());
 33c:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
		month	= bcd_to_decimal(I2C_receive());
 340:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
		year	= bcd_to_decimal(I2C_receive());
 344:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_receive>
		I2C_stop(); // I2C 정지
 348:	0e 94 7b 00 	call	0xf6	; 0xf6 <I2C_stop>

		PORTB = 0x0E; // 천의 자리 출력
 34c:	85 b8       	out	0x05, r8	; 5
		PORTD = numbers[minute/10];
 34e:	c6 01       	movw	r24, r12
 350:	b7 01       	movw	r22, r14
 352:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__divmodhi4>
 356:	e1 e0       	ldi	r30, 0x01	; 1
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	ec 0f       	add	r30, r28
 35c:	fd 1f       	adc	r31, r29
 35e:	e6 0f       	add	r30, r22
 360:	f7 1f       	adc	r31, r23
 362:	20 81       	ld	r18, Z
 364:	2b b9       	out	0x0b, r18	; 11
 366:	ef e1       	ldi	r30, 0x1F	; 31
 368:	fe e4       	ldi	r31, 0x4E	; 78
 36a:	31 97       	sbiw	r30, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x198>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0x19e>
 370:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0D; // 백의 자리 출력
 372:	95 b8       	out	0x05, r9	; 5
		PORTD = numbers[minute%10];
 374:	e1 e0       	ldi	r30, 0x01	; 1
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ec 0f       	add	r30, r28
 37a:	fd 1f       	adc	r31, r29
 37c:	e8 0f       	add	r30, r24
 37e:	f9 1f       	adc	r31, r25
 380:	80 81       	ld	r24, Z
 382:	8b b9       	out	0x0b, r24	; 11
 384:	8f e1       	ldi	r24, 0x1F	; 31
 386:	9e e4       	ldi	r25, 0x4E	; 78
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <main+0x1b6>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x1bc>
 38e:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0B; // 십의 자리 출력
 390:	a5 b8       	out	0x05, r10	; 5
		PORTD = numbers[sec/10];
 392:	c8 01       	movw	r24, r16
 394:	b7 01       	movw	r22, r14
 396:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__divmodhi4>
 39a:	e1 e0       	ldi	r30, 0x01	; 1
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	ec 0f       	add	r30, r28
 3a0:	fd 1f       	adc	r31, r29
 3a2:	e6 0f       	add	r30, r22
 3a4:	f7 1f       	adc	r31, r23
 3a6:	20 81       	ld	r18, Z
 3a8:	2b b9       	out	0x0b, r18	; 11
 3aa:	ef e1       	ldi	r30, 0x1F	; 31
 3ac:	fe e4       	ldi	r31, 0x4E	; 78
 3ae:	31 97       	sbiw	r30, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <main+0x1dc>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x1e2>
 3b4:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x07; // 일의 자리 출력
 3b6:	b5 b8       	out	0x05, r11	; 5
		PORTD = numbers[sec%10];
 3b8:	e1 e0       	ldi	r30, 0x01	; 1
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	ec 0f       	add	r30, r28
 3be:	fd 1f       	adc	r31, r29
 3c0:	e8 0f       	add	r30, r24
 3c2:	f9 1f       	adc	r31, r25
 3c4:	80 81       	ld	r24, Z
 3c6:	8b b9       	out	0x0b, r24	; 11
 3c8:	8f e1       	ldi	r24, 0x1F	; 31
 3ca:	9e e4       	ldi	r25, 0x4E	; 78
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <main+0x1fa>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x200>
 3d2:	00 00       	nop
 3d4:	8a cf       	rjmp	.-236    	; 0x2ea <main+0x118>

000003d6 <__divmodhi4>:
 3d6:	97 fb       	bst	r25, 7
 3d8:	07 2e       	mov	r0, r23
 3da:	16 f4       	brtc	.+4      	; 0x3e0 <__divmodhi4+0xa>
 3dc:	00 94       	com	r0
 3de:	07 d0       	rcall	.+14     	; 0x3ee <__divmodhi4_neg1>
 3e0:	77 fd       	sbrc	r23, 7
 3e2:	09 d0       	rcall	.+18     	; 0x3f6 <__divmodhi4_neg2>
 3e4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__udivmodhi4>
 3e8:	07 fc       	sbrc	r0, 7
 3ea:	05 d0       	rcall	.+10     	; 0x3f6 <__divmodhi4_neg2>
 3ec:	3e f4       	brtc	.+14     	; 0x3fc <__divmodhi4_exit>

000003ee <__divmodhi4_neg1>:
 3ee:	90 95       	com	r25
 3f0:	81 95       	neg	r24
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	08 95       	ret

000003f6 <__divmodhi4_neg2>:
 3f6:	70 95       	com	r23
 3f8:	61 95       	neg	r22
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255

000003fc <__divmodhi4_exit>:
 3fc:	08 95       	ret

000003fe <__udivmodhi4>:
 3fe:	aa 1b       	sub	r26, r26
 400:	bb 1b       	sub	r27, r27
 402:	51 e1       	ldi	r21, 0x11	; 17
 404:	07 c0       	rjmp	.+14     	; 0x414 <__udivmodhi4_ep>

00000406 <__udivmodhi4_loop>:
 406:	aa 1f       	adc	r26, r26
 408:	bb 1f       	adc	r27, r27
 40a:	a6 17       	cp	r26, r22
 40c:	b7 07       	cpc	r27, r23
 40e:	10 f0       	brcs	.+4      	; 0x414 <__udivmodhi4_ep>
 410:	a6 1b       	sub	r26, r22
 412:	b7 0b       	sbc	r27, r23

00000414 <__udivmodhi4_ep>:
 414:	88 1f       	adc	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	5a 95       	dec	r21
 41a:	a9 f7       	brne	.-22     	; 0x406 <__udivmodhi4_loop>
 41c:	80 95       	com	r24
 41e:	90 95       	com	r25
 420:	bc 01       	movw	r22, r24
 422:	cd 01       	movw	r24, r26
 424:	08 95       	ret

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
