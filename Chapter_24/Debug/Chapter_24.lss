
Chapter_24.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  0000019e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000861  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000701  00000000  00000000  00000bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019a  00000000  00000000  00001b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001cab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3c       	cpi	r26, 0xC8	; 200
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  8e:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <Init_74595>:
		ShiftClock();				// 1비트 출력 후 비트 이동
		data = data << 1;			// 다음 출력할 비트를 MSB로 이동
	}
	
	LatchClock();				// 1바이트 전달 후 실제 출력 발생
}
  96:	84 b1       	in	r24, 0x04	; 4
  98:	88 63       	ori	r24, 0x38	; 56
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	08 95       	ret

0000009e <ShiftClock>:
  9e:	2d 9a       	sbi	0x05, 5	; 5
  a0:	2d 98       	cbi	0x05, 5	; 5
  a2:	08 95       	ret

000000a4 <LatchClock>:
  a4:	2c 9a       	sbi	0x05, 4	; 5
  a6:	2c 98       	cbi	0x05, 4	; 5
  a8:	08 95       	ret

000000aa <WordDataWrite>:

void WordDataWrite(uint16_t data)		// 1 바이트 데이터 출력
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	8c 01       	movw	r16, r24
  b2:	c0 e1       	ldi	r28, 0x10	; 16
	for(uint8_t i = 0; i < 16; i++){
		if(data & 0x8000) 		// MSB부터 1비트 출력
  b4:	11 23       	and	r17, r17
  b6:	14 f4       	brge	.+4      	; 0xbc <WordDataWrite+0x12>
			PORTB |= 0b00001000;
  b8:	2b 9a       	sbi	0x05, 3	; 5
  ba:	01 c0       	rjmp	.+2      	; 0xbe <WordDataWrite+0x14>
		else
			PORTB &= 0b11110111;
  bc:	2b 98       	cbi	0x05, 3	; 5
		
		ShiftClock();				// 1비트 출력 후 비트 이동
  be:	0e 94 4f 00 	call	0x9e	; 0x9e <ShiftClock>
		data = data << 1;			// 다음 출력할 비트를 MSB로 이동
  c2:	00 0f       	add	r16, r16
  c4:	11 1f       	adc	r17, r17
  c6:	c1 50       	subi	r28, 0x01	; 1
	LatchClock();				// 1바이트 전달 후 실제 출력 발생
}

void WordDataWrite(uint16_t data)		// 1 바이트 데이터 출력
{
	for(uint8_t i = 0; i < 16; i++){
  c8:	a9 f7       	brne	.-22     	; 0xb4 <WordDataWrite+0xa>
		
		ShiftClock();				// 1비트 출력 후 비트 이동
		data = data << 1;			// 다음 출력할 비트를 MSB로 이동
	}
	
	LatchClock();				// 1바이트 전달 후 실제 출력 발생
  ca:	0e 94 52 00 	call	0xa4	; 0xa4 <LatchClock>
}
  ce:	cf 91       	pop	r28
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	08 95       	ret

000000d6 <main>:

int main(void)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	c8 5c       	subi	r28, 0xC8	; 200
  e0:	d1 09       	sbc	r29, r1
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
			//0xBEFC, 0xBE60, 0xBEDA, 0xBEF2, 0xBE66, 0xBEB6, 0xBEBE, 0xBEE4, 0xBEFE, 0xBEE6,
			//0xE4FC, 0xE460, 0xE4DA, 0xE4F2, 0xE466, 0xE4B6, 0xE4BE, 0xE4E4, 0xE4FE, 0xE4E6,
			//0xFEFC, 0xFE60, 0xFEDA, 0xFEF2, 0xFE66, 0xFEB6, 0xFEBE, 0xFEE4, 0xFEFE, 0xFEE6,
			//0xE6FC, 0xE660, 0xE6DA, 0xE6F2, 0xE666, 0xE6B6, 0xE6BE, 0xE6E4, 0xE6FE, 0xE6E6};
	
	uint16_t numbers[] =
  ec:	88 ec       	ldi	r24, 0xC8	; 200
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	de 01       	movw	r26, r28
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	01 90       	ld	r0, Z+
  f8:	0d 92       	st	X+, r0
  fa:	8a 95       	dec	r24
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x20>
		0xFCE4, 0x60E4, 0xDAE4, 0xF2E4, 0x66E4, 0xB6E4, 0xBEE4, 0xE4E4, 0xFEE4, 0xE6E4,
		0xFCFE, 0x60FC, 0xDAFE, 0xF2FE, 0x66FE, 0xB6FE, 0xBEFE, 0xE4FE, 0xEFFE, 0xE6FE,
	0xFCE6, 0x60E6, 0xDAE6, 0xF2E6, 0x66E6, 0xB6E6, 0xBEE6, 0xE4E6, 0xFEE6, 0xE6E6};
			
	
	Init_74595();				// 74595 초기화
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <Init_74595>
}

int main(void)
{
	//{0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
	uint8_t index = 0;
 102:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		uint16_t pattern = numbers[index];		// 출력 패턴 결정
		//uint8_t pattern = 0xff;		// 출력 패턴 결정
		index = (index + 1) % 100;		// 출력 패턴에서의 위치 결정
 104:	0f 2e       	mov	r0, r31
 106:	f4 e6       	ldi	r31, 0x64	; 100
 108:	ef 2e       	mov	r14, r31
 10a:	f1 2c       	mov	r15, r1
 10c:	f0 2d       	mov	r31, r0
	
	Init_74595();				// 74595 초기화
	
	while(1)
	{
		uint16_t pattern = numbers[index];		// 출력 패턴 결정
 10e:	21 2f       	mov	r18, r17
 110:	30 e0       	ldi	r19, 0x00	; 0
		//uint8_t pattern = 0xff;		// 출력 패턴 결정
		index = (index + 1) % 100;		// 출력 패턴에서의 위치 결정
 112:	c9 01       	movw	r24, r18
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	b7 01       	movw	r22, r14
 118:	0e 94 a5 00 	call	0x14a	; 0x14a <__divmodhi4>
 11c:	18 2f       	mov	r17, r24
	
	Init_74595();				// 74595 초기화
	
	while(1)
	{
		uint16_t pattern = numbers[index];		// 출력 패턴 결정
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	e1 e0       	ldi	r30, 0x01	; 1
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ec 0f       	add	r30, r28
 128:	fd 1f       	adc	r31, r29
 12a:	e2 0f       	add	r30, r18
 12c:	f3 1f       	adc	r31, r19
		//uint8_t pattern = 0xff;		// 출력 패턴 결정
		index = (index + 1) % 100;		// 출력 패턴에서의 위치 결정
		
		WordDataWrite(pattern);		// 바이트 데이터 출력
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	0e 94 55 00 	call	0xaa	; 0xaa <WordDataWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	83 ed       	ldi	r24, 0xD3	; 211
 13a:	90 e3       	ldi	r25, 0x30	; 48
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x66>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x70>
 146:	00 00       	nop
 148:	e2 cf       	rjmp	.-60     	; 0x10e <main+0x38>

0000014a <__divmodhi4>:
 14a:	97 fb       	bst	r25, 7
 14c:	07 2e       	mov	r0, r23
 14e:	16 f4       	brtc	.+4      	; 0x154 <__divmodhi4+0xa>
 150:	00 94       	com	r0
 152:	07 d0       	rcall	.+14     	; 0x162 <__divmodhi4_neg1>
 154:	77 fd       	sbrc	r23, 7
 156:	09 d0       	rcall	.+18     	; 0x16a <__divmodhi4_neg2>
 158:	0e 94 b9 00 	call	0x172	; 0x172 <__udivmodhi4>
 15c:	07 fc       	sbrc	r0, 7
 15e:	05 d0       	rcall	.+10     	; 0x16a <__divmodhi4_neg2>
 160:	3e f4       	brtc	.+14     	; 0x170 <__divmodhi4_exit>

00000162 <__divmodhi4_neg1>:
 162:	90 95       	com	r25
 164:	81 95       	neg	r24
 166:	9f 4f       	sbci	r25, 0xFF	; 255
 168:	08 95       	ret

0000016a <__divmodhi4_neg2>:
 16a:	70 95       	com	r23
 16c:	61 95       	neg	r22
 16e:	7f 4f       	sbci	r23, 0xFF	; 255

00000170 <__divmodhi4_exit>:
 170:	08 95       	ret

00000172 <__udivmodhi4>:
 172:	aa 1b       	sub	r26, r26
 174:	bb 1b       	sub	r27, r27
 176:	51 e1       	ldi	r21, 0x11	; 17
 178:	07 c0       	rjmp	.+14     	; 0x188 <__udivmodhi4_ep>

0000017a <__udivmodhi4_loop>:
 17a:	aa 1f       	adc	r26, r26
 17c:	bb 1f       	adc	r27, r27
 17e:	a6 17       	cp	r26, r22
 180:	b7 07       	cpc	r27, r23
 182:	10 f0       	brcs	.+4      	; 0x188 <__udivmodhi4_ep>
 184:	a6 1b       	sub	r26, r22
 186:	b7 0b       	sbc	r27, r23

00000188 <__udivmodhi4_ep>:
 188:	88 1f       	adc	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	5a 95       	dec	r21
 18e:	a9 f7       	brne	.-22     	; 0x17a <__udivmodhi4_loop>
 190:	80 95       	com	r24
 192:	90 95       	com	r25
 194:	bc 01       	movw	r22, r24
 196:	cd 01       	movw	r24, r26
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
