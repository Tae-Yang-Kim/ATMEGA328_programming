
Chapter_20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000362  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000362  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800150  00800150  00000446  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e5  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000758  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000554  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000303  00000000  00000000  00001fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000022b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  9e:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
#define MICROS_INCREMENT_PER_OVERFLOW ( MICROSECONDS_PER_TIMER0_OVERFLOW % 1000 )
// 프로그램 시작 이후의 경과 시간
volatile unsigned long timer0_millis = 0;
volatile int timer0_micros = 0;
ISR(TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
	unsigned long m = timer0_millis;
  c8:	00 91 52 01 	lds	r16, 0x0152	; 0x800152 <timer0_millis>
  cc:	10 91 53 01 	lds	r17, 0x0153	; 0x800153 <timer0_millis+0x1>
  d0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <timer0_millis+0x2>
  d4:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <timer0_millis+0x3>
	int f = timer0_micros;
  d8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
  dc:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
	m += MILLIS_INCREMENT_PER_OVERFLOW; // 밀리초 단위 시간 증가
  e0:	0f 5f       	subi	r16, 0xFF	; 255
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
  e4:	2f 4f       	sbci	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
	f += MICROS_INCREMENT_PER_OVERFLOW; // 마이크로초 단위 시간 증가
  e8:	48 96       	adiw	r24, 0x18	; 24
	// 마이크로초가 1000을 넘어가면 밀리초를 증가시킴
	int micro_to_millis = f / 1000;
	m += micro_to_millis;
  ea:	68 ee       	ldi	r22, 0xE8	; 232
  ec:	73 e0       	ldi	r23, 0x03	; 3
  ee:	0e 94 87 01 	call	0x30e	; 0x30e <__divmodhi4>
  f2:	ac 01       	movw	r20, r24
  f4:	cb 01       	movw	r24, r22
  f6:	77 0f       	add	r23, r23
  f8:	aa 0b       	sbc	r26, r26
  fa:	bb 0b       	sbc	r27, r27
  fc:	08 0f       	add	r16, r24
  fe:	19 1f       	adc	r17, r25
 100:	2a 1f       	adc	r18, r26
 102:	3b 1f       	adc	r19, r27
	f = f % 1000;
	timer0_millis = m;
 104:	00 93 52 01 	sts	0x0152, r16	; 0x800152 <timer0_millis>
 108:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <timer0_millis+0x1>
 10c:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <timer0_millis+0x2>
 110:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <timer0_millis+0x3>
	timer0_micros = f;
 114:	50 93 51 01 	sts	0x0151, r21	; 0x800151 <__data_end+0x1>
 118:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <__data_end>
}
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <millis>:
unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG; // 상태 레지스터 값 저장
 13e:	2f b7       	in	r18, 0x3f	; 63
	// timer0_millis 값을 읽는 동안
	// timer0_millis 값이 변하지 않도록 인터럽트를 비활성화
	cli();
 140:	f8 94       	cli
	m = timer0_millis;
 142:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <timer0_millis>
 146:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <timer0_millis+0x1>
 14a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <timer0_millis+0x2>
 14e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <timer0_millis+0x3>
	SREG = oldSREG; // 이전 상태 레지스터 값 복원
 152:	2f bf       	out	0x3f, r18	; 63
	return m; // 프로그램 시작 후 경과 시간
}
 154:	08 95       	ret

00000156 <LEDMatrix_init>:

void LEDMatrix_init(void)
{
	// 해당 column 핀을 출력으로 설정
	MATRIX_COL1_DDR |= (1 << MATRIX_COL1_PIN);
 156:	22 9a       	sbi	0x04, 2	; 4
	MATRIX_COL2_DDR |= (1 << MATRIX_COL2_PIN);
 158:	23 9a       	sbi	0x04, 3	; 4
	MATRIX_COL3_DDR |= (1 << MATRIX_COL3_PIN);
 15a:	24 9a       	sbi	0x04, 4	; 4
	MATRIX_COL4_DDR |= (1 << MATRIX_COL4_PIN);
 15c:	25 9a       	sbi	0x04, 5	; 4
	MATRIX_COL5_DDR |= (1 << MATRIX_COL5_PIN);
 15e:	38 9a       	sbi	0x07, 0	; 7
	MATRIX_COL6_DDR |= (1 << MATRIX_COL6_PIN);
 160:	39 9a       	sbi	0x07, 1	; 7
	MATRIX_COL7_DDR |= (1 << MATRIX_COL7_PIN);
 162:	3a 9a       	sbi	0x07, 2	; 7
	MATRIX_COL8_DDR |= (1 << MATRIX_COL8_PIN);
 164:	3b 9a       	sbi	0x07, 3	; 7
	
	// 해당 row 핀을 출력으로 설정
	MATRIX_ROW1_DDR |= (1 << MATRIX_ROW1_PIN);
 166:	52 9a       	sbi	0x0a, 2	; 10
	MATRIX_ROW2_DDR |= (1 << MATRIX_ROW2_PIN);
 168:	53 9a       	sbi	0x0a, 3	; 10
	MATRIX_ROW3_DDR |= (1 << MATRIX_ROW3_PIN);
 16a:	54 9a       	sbi	0x0a, 4	; 10
	MATRIX_ROW4_DDR |= (1 << MATRIX_ROW4_PIN);
 16c:	55 9a       	sbi	0x0a, 5	; 10
	MATRIX_ROW5_DDR |= (1 << MATRIX_ROW5_PIN);
 16e:	56 9a       	sbi	0x0a, 6	; 10
	MATRIX_ROW6_DDR |= (1 << MATRIX_ROW6_PIN);
 170:	57 9a       	sbi	0x0a, 7	; 10
	MATRIX_ROW7_DDR |= (1 << MATRIX_ROW7_PIN);
 172:	20 9a       	sbi	0x04, 0	; 4
	MATRIX_ROW8_DDR |= (1 << MATRIX_ROW8_PIN);
 174:	21 9a       	sbi	0x04, 1	; 4
 176:	08 95       	ret

00000178 <LEDMatrix_writeColumn>:
}

void LEDMatrix_writeColumn(uint8_t col_data)	// column 데이터 출력
{
	if(col_data & (1 << 0))	MATRIX_COL1_PORT |= (1 << MATRIX_COL1_PIN); // ON
 178:	80 ff       	sbrs	r24, 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <LEDMatrix_writeColumn+0x8>
 17c:	2a 9a       	sbi	0x05, 2	; 5
 17e:	01 c0       	rjmp	.+2      	; 0x182 <LEDMatrix_writeColumn+0xa>
	else MATRIX_COL1_PORT &= ~(1 << MATRIX_COL1_PIN);	// OFF
 180:	2a 98       	cbi	0x05, 2	; 5
	if(col_data & (1 << 1))	MATRIX_COL2_PORT |= (1 << MATRIX_COL2_PIN);
 182:	81 ff       	sbrs	r24, 1
 184:	02 c0       	rjmp	.+4      	; 0x18a <LEDMatrix_writeColumn+0x12>
 186:	2b 9a       	sbi	0x05, 3	; 5
 188:	01 c0       	rjmp	.+2      	; 0x18c <LEDMatrix_writeColumn+0x14>
	else MATRIX_COL2_PORT &= ~(1 << MATRIX_COL2_PIN);
 18a:	2b 98       	cbi	0x05, 3	; 5
	if(col_data & (1 << 2))	MATRIX_COL3_PORT |= (1 << MATRIX_COL3_PIN);
 18c:	82 ff       	sbrs	r24, 2
 18e:	02 c0       	rjmp	.+4      	; 0x194 <LEDMatrix_writeColumn+0x1c>
 190:	2c 9a       	sbi	0x05, 4	; 5
 192:	01 c0       	rjmp	.+2      	; 0x196 <LEDMatrix_writeColumn+0x1e>
	else MATRIX_COL3_PORT &= ~(1 << MATRIX_COL3_PIN);
 194:	2c 98       	cbi	0x05, 4	; 5
	if(col_data & (1 << 3))	MATRIX_COL4_PORT |= (1 << MATRIX_COL4_PIN);
 196:	83 ff       	sbrs	r24, 3
 198:	02 c0       	rjmp	.+4      	; 0x19e <LEDMatrix_writeColumn+0x26>
 19a:	2d 9a       	sbi	0x05, 5	; 5
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <LEDMatrix_writeColumn+0x28>
	else MATRIX_COL4_PORT &= ~(1 << MATRIX_COL4_PIN);
 19e:	2d 98       	cbi	0x05, 5	; 5
	if(col_data & (1 << 4))	MATRIX_COL5_PORT |= (1 << MATRIX_COL5_PIN);
 1a0:	84 ff       	sbrs	r24, 4
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <LEDMatrix_writeColumn+0x30>
 1a4:	40 9a       	sbi	0x08, 0	; 8
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <LEDMatrix_writeColumn+0x32>
	else MATRIX_COL5_PORT &= ~(1 << MATRIX_COL5_PIN);
 1a8:	40 98       	cbi	0x08, 0	; 8
	if(col_data & (1 << 5))	MATRIX_COL6_PORT |= (1 << MATRIX_COL6_PIN);
 1aa:	85 ff       	sbrs	r24, 5
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <LEDMatrix_writeColumn+0x3a>
 1ae:	41 9a       	sbi	0x08, 1	; 8
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <LEDMatrix_writeColumn+0x3c>
	else MATRIX_COL6_PORT &= ~(1 << MATRIX_COL6_PIN);
 1b2:	41 98       	cbi	0x08, 1	; 8
	if(col_data & (1 << 6))	MATRIX_COL7_PORT |= (1 << MATRIX_COL7_PIN);
 1b4:	86 ff       	sbrs	r24, 6
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <LEDMatrix_writeColumn+0x44>
 1b8:	42 9a       	sbi	0x08, 2	; 8
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <LEDMatrix_writeColumn+0x46>
	else MATRIX_COL7_PORT &= ~(1 << MATRIX_COL7_PIN);
 1bc:	42 98       	cbi	0x08, 2	; 8
	if(col_data & (1 << 7))	MATRIX_COL8_PORT |= (1 << MATRIX_COL8_PIN);
 1be:	88 23       	and	r24, r24
 1c0:	14 f4       	brge	.+4      	; 0x1c6 <LEDMatrix_writeColumn+0x4e>
 1c2:	43 9a       	sbi	0x08, 3	; 8
 1c4:	08 95       	ret
	else MATRIX_COL8_PORT &= ~(1 << MATRIX_COL8_PIN);
 1c6:	43 98       	cbi	0x08, 3	; 8
 1c8:	08 95       	ret

000001ca <LEDMatrix_writeRow>:
}

void LEDMatrix_writeRow(uint8_t row_data)	// row 데이터 출력
{
	if(row_data & (1 << 7))	MATRIX_ROW1_PORT |= (1 << MATRIX_ROW1_PIN);
 1ca:	88 23       	and	r24, r24
 1cc:	14 f4       	brge	.+4      	; 0x1d2 <LEDMatrix_writeRow+0x8>
 1ce:	5a 9a       	sbi	0x0b, 2	; 11
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <LEDMatrix_writeRow+0xa>
	else MATRIX_ROW1_PORT &= ~(1 << MATRIX_ROW1_PIN);
 1d2:	5a 98       	cbi	0x0b, 2	; 11
	if(row_data & (1 << 6))	MATRIX_ROW2_PORT |= (1 << MATRIX_ROW2_PIN);
 1d4:	86 ff       	sbrs	r24, 6
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <LEDMatrix_writeRow+0x12>
 1d8:	5b 9a       	sbi	0x0b, 3	; 11
 1da:	01 c0       	rjmp	.+2      	; 0x1de <LEDMatrix_writeRow+0x14>
	else MATRIX_ROW2_PORT &= ~(1 << MATRIX_ROW2_PIN);
 1dc:	5b 98       	cbi	0x0b, 3	; 11
	if(row_data & (1 << 5))	MATRIX_ROW3_PORT |= (1 << MATRIX_ROW3_PIN);
 1de:	85 ff       	sbrs	r24, 5
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <LEDMatrix_writeRow+0x1c>
 1e2:	5c 9a       	sbi	0x0b, 4	; 11
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <LEDMatrix_writeRow+0x1e>
	else MATRIX_ROW3_PORT &= ~(1 << MATRIX_ROW3_PIN);
 1e6:	5c 98       	cbi	0x0b, 4	; 11
	if(row_data & (1 << 4))	MATRIX_ROW4_PORT |= (1 << MATRIX_ROW4_PIN);
 1e8:	84 ff       	sbrs	r24, 4
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <LEDMatrix_writeRow+0x26>
 1ec:	5d 9a       	sbi	0x0b, 5	; 11
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <LEDMatrix_writeRow+0x28>
	else MATRIX_ROW4_PORT &= ~(1 << MATRIX_ROW4_PIN);
 1f0:	5d 98       	cbi	0x0b, 5	; 11
	if(row_data & (1 << 3))	MATRIX_ROW5_PORT |= (1 << MATRIX_ROW5_PIN);
 1f2:	83 ff       	sbrs	r24, 3
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <LEDMatrix_writeRow+0x30>
 1f6:	5e 9a       	sbi	0x0b, 6	; 11
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <LEDMatrix_writeRow+0x32>
	else MATRIX_ROW5_PORT &= ~(1 << MATRIX_ROW5_PIN);
 1fa:	5e 98       	cbi	0x0b, 6	; 11
	if(row_data & (1 << 2))	MATRIX_ROW6_PORT |= (1 << MATRIX_ROW6_PIN);
 1fc:	82 ff       	sbrs	r24, 2
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <LEDMatrix_writeRow+0x3a>
 200:	5f 9a       	sbi	0x0b, 7	; 11
 202:	01 c0       	rjmp	.+2      	; 0x206 <LEDMatrix_writeRow+0x3c>
	else MATRIX_ROW6_PORT &= ~(1 << MATRIX_ROW6_PIN);
 204:	5f 98       	cbi	0x0b, 7	; 11
	if(row_data & (1 << 1))	MATRIX_ROW7_PORT |= (1 << MATRIX_ROW7_PIN);
 206:	81 ff       	sbrs	r24, 1
 208:	02 c0       	rjmp	.+4      	; 0x20e <LEDMatrix_writeRow+0x44>
 20a:	28 9a       	sbi	0x05, 0	; 5
 20c:	01 c0       	rjmp	.+2      	; 0x210 <LEDMatrix_writeRow+0x46>
	else MATRIX_ROW7_PORT &= ~(1 << MATRIX_ROW7_PIN);
 20e:	28 98       	cbi	0x05, 0	; 5
	if(row_data & (1 << 0))	MATRIX_ROW8_PORT |= (1 << MATRIX_ROW8_PIN);
 210:	80 ff       	sbrs	r24, 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <LEDMatrix_writeRow+0x4e>
 214:	29 9a       	sbi	0x05, 1	; 5
 216:	08 95       	ret
	else MATRIX_ROW8_PORT &= ~(1 << MATRIX_ROW8_PIN);
 218:	29 98       	cbi	0x05, 1	; 5
 21a:	08 95       	ret

0000021c <main>:
}

int main(void)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	c0 55       	subi	r28, 0x50	; 80
 226:	d1 09       	sbc	r29, r1
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
	LEDMatrix_init();
 232:	0e 94 ab 00 	call	0x156	; 0x156 <LEDMatrix_init>

	uint8_t digits[10][8] = {
 236:	80 e5       	ldi	r24, 0x50	; 80
 238:	e0 e0       	ldi	r30, 0x00	; 0
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	de 01       	movw	r26, r28
 23e:	11 96       	adiw	r26, 0x01	; 1
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	8a 95       	dec	r24
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x24>
		 {0x40,0x20,0x10,0x08,0x04,0x02,0x02,0x7e},
		 {0x3c,0x42,0x42,0x42,0x3c,0x42,0x42,0x3c},
		 {0x20,0x10,0x08,0x04,0x3c,0x42,0x42,0x3c},
	};

	TCCR0B |= (1<<CS01) | (0 << CS00); // 분주비를 64로 설정
 248:	85 b5       	in	r24, 0x25	; 37
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0); // 오버플로 인터럽트 허용
 24e:	ee e6       	ldi	r30, 0x6E	; 110
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 83       	st	Z, r24
	sei(); // 전역적으로 인터럽트 허용
 258:	78 94       	sei
	unsigned long time_previous, time_current;
	
	time_previous = millis();
 25a:	0e 94 9f 00 	call	0x13e	; 0x13e <millis>
	int j=0;
	int count=0;
 25e:	a1 2c       	mov	r10, r1
 260:	b1 2c       	mov	r11, r1
	TIMSK0 |= (1 << TOIE0); // 오버플로 인터럽트 허용
	sei(); // 전역적으로 인터럽트 허용
	unsigned long time_previous, time_current;
	
	time_previous = millis();
	int j=0;
 262:	81 2c       	mov	r8, r1
 264:	91 2c       	mov	r9, r1
			time_previous = millis();
			
			for(int i = 0; i < 8; i++){
				// 열 단위 스캔이므로 하나의 열에만 LOW를 가하고 나머지는 HIGH를 가함
				uint8_t col_data = ~(1 << i);
				LEDMatrix_writeColumn(col_data);
 266:	cc 24       	eor	r12, r12
 268:	c3 94       	inc	r12
 26a:	d1 2c       	mov	r13, r1
 26c:	02 c0       	rjmp	.+4      	; 0x272 <main+0x56>
			}
			if((time_current - time_previous) > 1000){ // 1초 경과
				time_previous = time_current;
				count++;
				if(count==10){
					count=0;
 26e:	a1 2c       	mov	r10, r1
 270:	b1 2c       	mov	r11, r1
	int j=0;
	int count=0;
	while(1)
	{
		while(1){
			time_previous = millis();
 272:	0e 94 9f 00 	call	0x13e	; 0x13e <millis>
 276:	2b 01       	movw	r4, r22
 278:	3c 01       	movw	r6, r24
 27a:	74 01       	movw	r14, r8
 27c:	ee 0c       	add	r14, r14
 27e:	ff 1c       	adc	r15, r15
 280:	ee 0c       	add	r14, r14
 282:	ff 1c       	adc	r15, r15
 284:	ee 0c       	add	r14, r14
 286:	ff 1c       	adc	r15, r15
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	8c 0f       	add	r24, r28
 28e:	9d 1f       	adc	r25, r29
 290:	e8 0e       	add	r14, r24
 292:	f9 1e       	adc	r15, r25
			
			for(int i = 0; i < 8; i++){
 294:	00 e0       	ldi	r16, 0x00	; 0
 296:	10 e0       	ldi	r17, 0x00	; 0
				// 열 단위 스캔이므로 하나의 열에만 LOW를 가하고 나머지는 HIGH를 가함
				uint8_t col_data = ~(1 << i);
				LEDMatrix_writeColumn(col_data);
 298:	c6 01       	movw	r24, r12
 29a:	00 2e       	mov	r0, r16
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <main+0x86>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <main+0x82>
 2a6:	80 95       	com	r24
 2a8:	0e 94 bc 00 	call	0x178	; 0x178 <LEDMatrix_writeColumn>
				// 각 열에 대응하는 스마일 문자 데이터를 출력
				LEDMatrix_writeRow(digits[j][i]);
 2ac:	f7 01       	movw	r30, r14
 2ae:	81 91       	ld	r24, Z+
 2b0:	7f 01       	movw	r14, r30
 2b2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LEDMatrix_writeRow>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	8f e3       	ldi	r24, 0x3F	; 63
 2b8:	9f e1       	ldi	r25, 0x1F	; 31
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0x9e>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0xa4>
 2c0:	00 00       	nop
	while(1)
	{
		while(1){
			time_previous = millis();
			
			for(int i = 0; i < 8; i++){
 2c2:	0f 5f       	subi	r16, 0xFF	; 255
 2c4:	1f 4f       	sbci	r17, 0xFF	; 255
 2c6:	08 30       	cpi	r16, 0x08	; 8
 2c8:	11 05       	cpc	r17, r1
 2ca:	31 f7       	brne	.-52     	; 0x298 <main+0x7c>
				// 각 열에 대응하는 스마일 문자 데이터를 출력
				LEDMatrix_writeRow(digits[j][i]);
			
				_delay_ms(2);
			}
			if((time_current - time_previous) > 1000){ // 1초 경과
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	dc 01       	movw	r26, r24
 2d2:	84 19       	sub	r24, r4
 2d4:	95 09       	sbc	r25, r5
 2d6:	a6 09       	sbc	r26, r6
 2d8:	b7 09       	sbc	r27, r7
 2da:	89 3e       	cpi	r24, 0xE9	; 233
 2dc:	93 40       	sbci	r25, 0x03	; 3
 2de:	a1 05       	cpc	r26, r1
 2e0:	b1 05       	cpc	r27, r1
 2e2:	38 f2       	brcs	.-114    	; 0x272 <main+0x56>
				time_previous = time_current;
				count++;
 2e4:	ff ef       	ldi	r31, 0xFF	; 255
 2e6:	af 1a       	sub	r10, r31
 2e8:	bf 0a       	sbc	r11, r31
				if(count==10){
 2ea:	2a e0       	ldi	r18, 0x0A	; 10
 2ec:	a2 16       	cp	r10, r18
 2ee:	b1 04       	cpc	r11, r1
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <main+0xd8>
 2f2:	bf cf       	rjmp	.-130    	; 0x272 <main+0x56>
					count=0;
					j++;
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	88 1a       	sub	r8, r24
 2f8:	98 0a       	sbc	r9, r24
					if(j==10) j=0;
 2fa:	9a e0       	ldi	r25, 0x0A	; 10
 2fc:	89 16       	cp	r8, r25
 2fe:	91 04       	cpc	r9, r1
 300:	09 f0       	breq	.+2      	; 0x304 <main+0xe8>
 302:	b5 cf       	rjmp	.-150    	; 0x26e <main+0x52>
			}
			if((time_current - time_previous) > 1000){ // 1초 경과
				time_previous = time_current;
				count++;
				if(count==10){
					count=0;
 304:	a1 2c       	mov	r10, r1
 306:	b1 2c       	mov	r11, r1
					j++;
					if(j==10) j=0;
 308:	81 2c       	mov	r8, r1
 30a:	91 2c       	mov	r9, r1
 30c:	b2 cf       	rjmp	.-156    	; 0x272 <main+0x56>

0000030e <__divmodhi4>:
 30e:	97 fb       	bst	r25, 7
 310:	07 2e       	mov	r0, r23
 312:	16 f4       	brtc	.+4      	; 0x318 <__divmodhi4+0xa>
 314:	00 94       	com	r0
 316:	07 d0       	rcall	.+14     	; 0x326 <__divmodhi4_neg1>
 318:	77 fd       	sbrc	r23, 7
 31a:	09 d0       	rcall	.+18     	; 0x32e <__divmodhi4_neg2>
 31c:	0e 94 9b 01 	call	0x336	; 0x336 <__udivmodhi4>
 320:	07 fc       	sbrc	r0, 7
 322:	05 d0       	rcall	.+10     	; 0x32e <__divmodhi4_neg2>
 324:	3e f4       	brtc	.+14     	; 0x334 <__divmodhi4_exit>

00000326 <__divmodhi4_neg1>:
 326:	90 95       	com	r25
 328:	81 95       	neg	r24
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	08 95       	ret

0000032e <__divmodhi4_neg2>:
 32e:	70 95       	com	r23
 330:	61 95       	neg	r22
 332:	7f 4f       	sbci	r23, 0xFF	; 255

00000334 <__divmodhi4_exit>:
 334:	08 95       	ret

00000336 <__udivmodhi4>:
 336:	aa 1b       	sub	r26, r26
 338:	bb 1b       	sub	r27, r27
 33a:	51 e1       	ldi	r21, 0x11	; 17
 33c:	07 c0       	rjmp	.+14     	; 0x34c <__udivmodhi4_ep>

0000033e <__udivmodhi4_loop>:
 33e:	aa 1f       	adc	r26, r26
 340:	bb 1f       	adc	r27, r27
 342:	a6 17       	cp	r26, r22
 344:	b7 07       	cpc	r27, r23
 346:	10 f0       	brcs	.+4      	; 0x34c <__udivmodhi4_ep>
 348:	a6 1b       	sub	r26, r22
 34a:	b7 0b       	sbc	r27, r23

0000034c <__udivmodhi4_ep>:
 34c:	88 1f       	adc	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	5a 95       	dec	r21
 352:	a9 f7       	brne	.-22     	; 0x33e <__udivmodhi4_loop>
 354:	80 95       	com	r24
 356:	90 95       	com	r25
 358:	bc 01       	movw	r22, r24
 35a:	cd 01       	movw	r24, r26
 35c:	08 95       	ret

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
