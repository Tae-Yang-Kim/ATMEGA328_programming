
Chapter_07.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000734  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000687  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026c  00000000  00000000  00000f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005f  00000000  00000000  000015cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000162e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_INIT>:
#define F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>

void UART_INIT(void){
	UCSR0A |= _BV(U2X0);//2배속 모드
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
	
	UBRR0H = 0x00; //통신 속도(보율)조정
  8a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 207;
  8e:	8f ec       	ldi	r24, 0xCF	; 207
  90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	//비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR0B |= _BV(RXEN0);
  94:	e1 ec       	ldi	r30, 0xC1	; 193
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
  9e:	80 81       	ld	r24, Z
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <UART_receive>:
}

unsigned char UART_receive(void){
 	while(!(UCSR0A & (1<<RXC0)));
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 23       	and	r24, r24
  ae:	ec f7       	brge	.-6      	; 0xaa <UART_receive+0x4>
	return UDR0;
  b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  b4:	08 95       	ret

000000b6 <UART_transmit>:

void UART_transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
  b6:	e0 ec       	ldi	r30, 0xC0	; 192
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	95 ff       	sbrs	r25, 5
  be:	fd cf       	rjmp	.-6      	; 0xba <UART_transmit+0x4>
	UDR0 = data;
  c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c4:	08 95       	ret

000000c6 <main>:
}

int main(int argc, char *argv[]){
	unsigned char data;
	
	UART_INIT();
  c6:	0e 94 40 00 	call	0x80	; 0x80 <UART_INIT>
	while(1){
		data = UART_receive();
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_receive>

		UART_transmit(data);
  ce:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART_transmit>
  d2:	fb cf       	rjmp	.-10     	; 0xca <main+0x4>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
